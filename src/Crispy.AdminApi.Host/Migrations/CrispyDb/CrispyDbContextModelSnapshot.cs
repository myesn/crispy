// <auto-generated />
using Crispy.Abstractions;
using Crispy.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Crispy.AdminApi.Host.Migrations.CrispyDb
{
    [DbContext(typeof(CrispyDbContext))]
    partial class CrispyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Crispy.Abstractions.CrispyApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTimeCreated");

                    b.Property<bool>("Deleted");

                    b.Property<bool>("Enabler");

                    b.Property<bool>("Encryption");

                    b.Property<bool>("IncludeGlobalConfig");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Crispy.Abstractions.CrispyEnvironment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ApplicatoinId");

                    b.Property<DateTime>("DateTimeCreated");

                    b.Property<bool>("Deleted");

                    b.Property<bool>("Enabler");

                    b.Property<bool>("Encryption");

                    b.Property<bool>("IncludeGlobalConfig");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ApplicatoinId");

                    b.ToTable("Environments");
                });

            modelBuilder.Entity("Crispy.Abstractions.CrispyKeyValuePair", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApplyType");

                    b.Property<DateTime>("DateTimeCreated");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<bool>("Enabler");

                    b.Property<Guid?>("EnvironmentId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Value")
                        .HasMaxLength(1280);

                    b.Property<int>("ValueType");

                    b.HasKey("Id");

                    b.HasIndex("EnvironmentId");

                    b.ToTable("KeyValuePairs");
                });

            modelBuilder.Entity("Crispy.Abstractions.CrispyKeyValuePairHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTimeCreated");

                    b.Property<Guid>("KeyValuePairId");

                    b.Property<string>("Value")
                        .HasMaxLength(1280);

                    b.Property<int>("ValueType");

                    b.HasKey("Id");

                    b.HasIndex("KeyValuePairId");

                    b.ToTable("KeyValuePairHistories");
                });

            modelBuilder.Entity("Crispy.Abstractions.CrispyVariable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ApplicationId");

                    b.Property<DateTime>("DateTimeCreated");

                    b.Property<bool>("Deleted");

                    b.Property<bool>("Enabler");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1280);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Variables");
                });

            modelBuilder.Entity("Crispy.Abstractions.CrispyEnvironment", b =>
                {
                    b.HasOne("Crispy.Abstractions.CrispyApplication", "Application")
                        .WithMany("Enviroments")
                        .HasForeignKey("ApplicatoinId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Crispy.Abstractions.CrispyKeyValuePair", b =>
                {
                    b.HasOne("Crispy.Abstractions.CrispyEnvironment", "Environment")
                        .WithMany("KeyValuePairs")
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Crispy.Abstractions.CrispyKeyValuePairHistory", b =>
                {
                    b.HasOne("Crispy.Abstractions.CrispyKeyValuePair", "KeyValuePair")
                        .WithMany("Histories")
                        .HasForeignKey("KeyValuePairId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Crispy.Abstractions.CrispyVariable", b =>
                {
                    b.HasOne("Crispy.Abstractions.CrispyApplication", "Application")
                        .WithMany("Variables")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
